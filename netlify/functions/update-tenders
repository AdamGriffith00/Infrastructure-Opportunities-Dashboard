// netlify/functions/update-tenders.mjs
import { createClient } from "@netlify/blobs";

export async function handler() {
  try {
    const { BLOBS_SITE_ID, BLOBS_TOKEN } = process.env;
    if (!BLOBS_SITE_ID || !BLOBS_TOKEN) {
      return json(500, { ok: false, error: "Missing BLOBS_SITE_ID or BLOBS_TOKEN env var" });
    }
    const blobs = createClient({ siteID: BLOBS_SITE_ID, token: BLOBS_TOKEN });
    const store = blobs.store("tenders");

    // ---- fetch helpers with defensive parsing ----
    const getJSON = async (url) => {
      const res = await fetch(url, { headers: { "user-agent": "Gleeds/Infra-Dashboard" } });
      const txt = await res.text();
      let data;
      try { data = JSON.parse(txt); } catch (e) {
        throw new Error(`Non-JSON from ${url} (status ${res.status}) first 400: ${txt.slice(0,400)}`);
      }
      return { status: res.status, data };
    };

    // CF (OCDS) – 1 page first (expand later once we confirm)
    const cfUrl = "https://www.contractsfinder.service.gov.uk/Published/Notices/OCDS/Search?status=Open&order=desc&pageSize=100&page=1";
    const { status: cfStatus, data: cfData } = await getJSON(cfUrl);
    const cfReleases = Array.isArray(cfData.releases) ? cfData.releases : [];
    const cfItems = cfReleases.map(normaliseCF);

    // FTS – new params: stages=tender, with cursor/limit
    const ftsUrl = "https://www.find-tender.service.gov.uk/api/1.0/ocdsReleasePackages?stages=tender&limit=100";
    const { status: ftsStatus, data: ftsData } = await getJSON(ftsUrl);
    const ftsReleases =
      Array.isArray(ftsData.releases) ? ftsData.releases :
      Array.isArray(ftsData.packages) ? ftsData.packages.flatMap(p => p.releases || []) :
      [];
    const ftsItems = ftsReleases.map(normaliseFTS);

    const merged = dedupe([...cfItems, ...ftsItems]);
    // persist
    await store.setJSON("latest.json", {
      updatedAt: new Date().toISOString(),
      items: merged
    });

    return json(200, {
      ok: true,
      counts: { cf: cfItems.length, fts: ftsItems.length, final: merged.length },
      notes: { cfStatus, ftsStatus }
    });
  } catch (err) {
    // bubble the real reason to the browser
    return json(500, { ok: false, error: String(err?.message || err) });
  }
}

// ---------- helpers ----------
function json(status, obj) {
  return { statusCode: status, headers: { "content-type": "application/json" }, body: JSON.stringify(obj) };
}

function dedupe(arr) {
  const seen = new Set();
  return arr.filter((x) => {
    const key = `${(x.title||"").trim()}|${(x.organisation||"").trim()}|${(x.deadline||"").trim()}`;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
}

function normaliseCF(r = {}) {
  const t = r.tender || {};
  const buyer = (r.parties || []).find(p => Array.isArray(p.roles) && p.roles.includes("buyer"));
  return {
    source: "CF",
    title: t.title || r.title || "",
    organisation: buyer?.name || r.buyerName || "",
    region: t.deliveryLocations?.[0]?.nuts || "",
    deadline: t.tenderPeriod?.endDate || "",
    url: r.id ? `https://www.contractsfinder.service.gov.uk/Notice/${encodeURIComponent(r.id)}` : ""
  };
}

function normaliseFTS(r = {}) {
  const t = r.tender || {};
  const buyer = (r.parties || []).find(p => Array.isArray(p.roles) && p.roles.includes("buyer"));
  return {
    source: "FTS",
    title: t.title || r.title || "",
    organisation: buyer?.name || "",
    region: t.deliveryLocations?.[0]?.nuts || "",
    deadline: t.tenderPeriod?.endDate || "",
    url: r.ocid ? `https://www.find-tender.service.gov.uk/Notice/${encodeURIComponent(r.ocid)}` : ""
  };
}
